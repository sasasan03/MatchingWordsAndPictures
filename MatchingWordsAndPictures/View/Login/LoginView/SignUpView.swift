//
//  SignUpView.swift
//  FBSampleApp
//
//  Created by sako0602 on 2023/08/26.
//

import SwiftUI
import FirebaseAuth
import Firebase
import FirebaseStorage



enum LoginError: LocalizedError {
    case inVaildMail
    case inValidPass
    case unKnown
    
    var errorDescription: String? {
        switch self {
        case .inVaildMail: return "„É°„Éº„É´ÈñìÈÅï„ÅÑ"
        case .inValidPass: return "ÂÖ•Âäõ„Åó„Åü„Éë„Çπ„ÉØ„Éº„ÉâÈñìÈÅï„ÅÑ"
        case .unKnown: return "„Çè„Åã„Çì„Å≠"
        }
    }
    
}

struct SignUpView: View {
    
    @Binding var currentShowingView: AuthState
    @AppStorage("uid") var userID = ""
    @State private var mail = ""
    @State private var password = ""
    @State private var loginStatusMessage = ""
    
    //MARK: - „Ç®„É©„ÉºÂá¶ÁêÜ„Åß‰ΩøÁî®
    @State var loginError: LoginError? = nil
    @State var showAlert = false
    
    var body: some View {
        ZStack {
            Color.blue.ignoresSafeArea(.all)
            
            VStack{
                Text("„Å®„ÅÜ„Çç„Åè")
                    .font(.largeTitle)
                    .bold()
                    .foregroundColor(.white)
                    
                Spacer()
                //MARK: - mail
                HStack{
                    Image(systemName: "mail")
                    TextField("mail", text: $mail)
                    
                    Spacer()
                    
                    Image(systemName: mail.count != 0 ? "checkmark" : "xmark")
                        .foregroundColor(mail.count != 0 ?.green : .red)
                }
                .padding()
                .overlay(
                    RoundedRectangle(cornerRadius: 10)
                        .stroke(lineWidth: 2)
                        .foregroundColor(.black)
                )
                .background(RoundedRectangle(cornerRadius: 10).fill(Color.white))
                //MARK: - password
                HStack{
                    Image(systemName: "mail")
                    TextField("mail", text: $password)
                    
                    Spacer()
                    
                    Image(systemName: password.count != 0 ? "checkmark" : "xmark")
                        .foregroundColor(password.count != 0 ?.green : .red)
                }
                .padding()
                .overlay(
                    RoundedRectangle(cornerRadius: 10)
                        .stroke(lineWidth: 2)
                        .foregroundColor(.black)
                )
                .background(RoundedRectangle(cornerRadius: 10).fill(Color.white))
                
                Spacer()
                Text(loginStatusMessage)
                    .foregroundColor(.black)
                Spacer()
                
                //MARK: - ÁôªÈå≤„Éú„Çø„É≥
                Button("ÁôªÈå≤„Åô„Çã"){
                    //TODO: „Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅÆÁôªÈå≤„ÄÇË™çË®º
                    
                    Auth.auth().createUser(withEmail: mail, password: password){ authResult , error in
                        guard mail.count == 0 || password.count == 0 else {
                            return
                        }

                        if let error = error as? LoginError {
                           print("üçî")
                        loginError = error//üü•()„Çí„Å§„Åë„Çã„Å®Ëß£Ê∂à„ÄÇË©ï‰æ°„ÅÆÂÑ™ÂÖàÈ†Ü‰Ωç„Çí„Å§„Åë„Å¶„Åè„Çå„Çã„ÅÆ„ÅãÔºü
                            showAlert = true
                            return
                        }
                        print("üçü")
                        if let authResult = authResult {
                            userID = authResult.user.uid
                        }
                    }
                    //TODO: „Çµ„ÇØ„Çª„Çπ„Éì„É•„Éº„Å∏„ÅÆÈÅ∑Áßª
                    withAnimation{
                        currentShowingView = .loginComplete
                    }
                }
                .foregroundColor(.white)
                .padding()

            }
            .alert(isPresented: $showAlert, error: loginError, actions: { error in
                
                
            }, message: { error in
                Text(error.errorDescription ?? "unknown")
                Button("ÊâøÁü•ÔºÅÔºÅ"){
                    showAlert = false
                }
            })
            
            .padding()
        }
    }
    
}

struct SignUpView_Previews: PreviewProvider {
    static var previews: some View {
        SignUpView(currentShowingView: .constant(AuthState.signUp))
//            .environmentObject(AuthenticationViewModel())
    }
}
